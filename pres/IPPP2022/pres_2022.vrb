\frametitle{\codeL {Definitions.mk}}
In order to call the \PY interface of \mimes, we need to first call \cppin{make lib} in the root directory of \mimes.\\[0.2cm]
	
	Before that, we can take some time to decide what the template arguments and compilation  options should be. In the
	file \cppin{MiMeS/Definitions.mk}, you can change the variables:
	%
	\begin{itemize}
		\item \cppin{LONGpy=long} will compile the library with \cppin{long double} numeric types. \cppin{LONGpy=} will compile the library with \cppin{double} numeric types.
		\item \cppin{SOLVER} and \cppin{METHOD}, as in the template arguments.
	\end{itemize}
	
	Also, in the same file, you can change compilation options:
	%
	\begin{itemize}
		\item Compiler:
		\begin{itemize}
			\item \cppin{CC=g++} in order to use the \cppin{GNU} \CPP compiler.
			\item \cppin{CC=clang -lstdc++} in order to use the \cppin{clang} \CPP compiler.
		\end{itemize}
		\item Optimization level:
		\begin{itemize}
			\item \cppin{OPT=O0}: No optimization.
			\item \cppin{O=O1}, \cppin{O2}, or \cppin{O3}: all these perform mostly the same (read the compiler documentation for more information on the optimization).
			\item \cppin{OPT=Ofast}: full optimization (fast, but dangerous).
		\end{itemize}
	\end{itemize}
